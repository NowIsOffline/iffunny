// 16种颜色配置
const COLORS = [
    '#737171', '#FF1100', '#0000FF', '#FFFF00',
    '#FF00FF', '#00FFFF', '#FF8000', '#8000FF',
    '#0080FF', '#FF0080', '#80FF00', '#00FF80',
    '#800000', '#008000', '#000080','#000080',
];

// 关卡设计：值 = 16*颜色下标 + 撞击次数
const levels = [
    [
        [0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 18, 82, 18, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 18, 178, 82, 178, 18, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 18, 2, 178, 82, 178, 2, 18, 0, 0, 0, 0],
        [0, 0, 0, 18, 82, 2, 178, 82, 178, 2, 82, 18, 0, 0, 0],
        [0, 0, 18, 146, 146, 82, 178, 82, 178, 82, 146, 146, 18, 0, 0],
        [0, 18, 146, 2, 2, 146, 82, 82, 82, 146, 2, 2, 146, 18, 0],
        [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ],[
        [18, 162, 18, 0, 130, 0, 18, 0, 18, 0],
        [162, 18, 0, 130, 130, 18, 0, 18, 0, 18],
        [18, 0, 130, 130, 18, 0, 18, 82, 18, 0],
        [0, 130, 130, 18, 0, 18, 82, 18, 162, 18],
        [130, 130, 18, 0, 18, 82, 18, 162, 18, 0],
        [0, 18, 0, 18, 82, 18, 162, 18, 0, 18],
        [18, 0, 18, 82, 18, 162, 18, 0, 18, 66],
        [0, 18, 0, 18, 162, 18, 0, 18, 66, 18]
    ],[
        [1, 1, 1, 82, 82, 1, 1, 82, 82, 1, 1, 1],
        [1, 50, 50, 0, 0, 0, 0, 0, 50, 50, 0, 1],
        [1, 50, 0, 50, 0, 0, 0, 50, 0, 0, 50, 1],
        [1, 50, 0, 0, 50, 0, 0, 50, 0, 0, 50, 1],
        [1, 50, 0, 0, 50, 0, 0, 50, 0, 0, 50, 1],
        [1, 50, 0, 50, 0, 0, 0, 50, 0, 0, 50, 1],
        [1, 50, 50, 0, 0, 0, 0, 0, 50, 50, 0, 1],
        [1, 17, 17, 1, 1, 17, 17, 1, 1, 17, 17, 1]
    ]

];

// 颜色和撞击次数解码函数
function decodeBlockValue(value) {
    if (value === 0) return null;
    const colorIndex = Math.floor(value / 16);
    const hits = value % 16;

    if (colorIndex === 0) {
        return {
            color: COLORS[colorIndex % COLORS.length],
            maxHits: Infinity, // 永远不会被破坏
            hits: 0,
            indestructible: true
        };
    }

    return {
        color: COLORS[colorIndex % COLORS.length],
        maxHits: hits,
        hits: 0,
        indestructible: false
    };
}
